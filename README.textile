h1. csvkit

A library of utilities for working with CSV, the king of tabular file formats.  Inspired by pdftk.

*THIS CODE IS VERY ALPHA*

h2. Principles 

* Produce compatibility-oriented CSVs. This means that quoting is done with double-quotes and only when necessary, columns are separated with commas, and lines are terminated with unix style line endings ("\n").

* Write to STDOUT in order to support piping. As an example, the following would display the top 10 rows, columns 1 and 3 only, of a Excel xls file that has been converted to csv:

<pre>
in2csv data.xls | csvcut -c 1,3 | head 10
</pre>

* Read and write rectangular data. Columns without headers are ignored.

* Standardize, standardize, standardize. Floats should end with ".0", even if they are round. Dates and times should be in ISO8601 format. Etc.

h2. Installation

For developers:

<pre>
git clone git://github.com/onyxfish/csvkit.git
cd csvkit
mkvirtualenv --no-site-packages csvkit
pip install -r requirements.txt
nosetests
</pre>

For users (until first PyPI build is ready):

<pre>
git://github.com/onyxfish/csvkit.git
cd csvkit
python setup.py install
</pre>

h2. Usage: in2csv

Converts various formats into csv. Currently supported: fixed-width and xls (Excel).

Converting fixed width requires that you provide a schema file with the "-s" option. The schema file should have the following format:

<pre>
column,start,length
name,0,30
birthday,30,10
age,40,3
</pre>

The header line is required and must match exactly.

All output from in2csv is written to standard out.

Convert a fixed-width file:

<pre>
in2csv -s examples/textfised_schema.csv examples/testfixed
</pre>

Convert an xls file:

<pre>
in2csv examples/test.xls
</pre>

h2. Usage: csvcut

Filters and truncates CSV files. Like unix "cut" command, but for tabular data.

Note that csvcut does not include row slicing or filtering, for this you should pipe data to head, tail, or grep.

Print the indices and names of all columns:

<pre>
csvcut -n examples/testfixed_converted.csv
</pre>

Extract the first and third columns:

<pre>
csvcut -c 1,3 examples/testfixed_converted.csv
</pre>

Extract columns named "integer" and "date":

<pre>
csvcut -c integer,date examples/testfixed_converted.csv
</pre>

Show the first ten values in column 1:

<pre>
csvcut -c 1 -s examples/testfixed_converted.csv | head -n 10
</pre>

Show the last value in column 6:

<pre>
csvcut -c 6 -s examples/testfixed_converted.csv | tail -n 1
</pre>

Show unique values in the fourth column:

<pre>
csvcut -c 4 -s examples/testfixed_converted.csv | uniq
</pre>

Search for rows about Chicago:

<pre>
csvcut -s examples/testfixed_converted.csv | grep -i chicago
</pre>

Add line-numbers to the csvcut output, then find the Chicago Tribune:

<pre>
csvcut -l -s examples/testfixed_converted.csv | grep -i tribune
</pre>

h2. Projected list of utilities:

in2csv - convert fixed-width, xls, xlsx, odf, and dbf files into csv (inspired by ogr2ogr)
csvcut - extension of Joe Germuska and Aaron Bycoffe's CSV splicing/munging tool
csv2sql - generate a sql create table statement for a CSV using type inference (in particular for use with the COPY command in postgres)
csvtest - validate that a CSV does not contain mixed datatypes and other anomalies
csvsummary - generate summary statistics for columns in a CSV (like R's summary() function)
csvjoin - quickly merge two CSV files by a shared column

h2. Authors

Christopher Groskopf
Joe Germuska
Aaron Bycoffe

h2. License

MIT
