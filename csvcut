#!/usr/bin/env python

"""
csvcut is originally the work of eminent hackers Joe Germuska and Aaron Bycoffe.

This code is forked from:
https://gist.github.com/561347/9846ebf8d0a69b06681da9255ffe3d3f59ec2c97

Used and modified with permission.
"""

from cStringIO import StringIO
import sys

from csvkit import init_common_parser, extract_csv_reader_kwargs
from csvkit import table 

class ColumnIdentifierError(Exception):
    """
    Exception raised when the user supplies an invalid column identifier.
    """
    def __init__(self, msg):
        self.msg = msg

def parse_column_identifiers(ids, column_names):
    """
    Parse a comma-separated list of column indicies and names into a list of integer indices.
    """
    # If not specified, return all columns 
    if not ids:
        return range(len(column_names))

    columns = []

    for c in ids.split(','):
        if c in column_names:
            columns.append(column_names.index(c))
        else:
            try:
                c = int(c) - 1
            # Fail out if neither a column name nor an integer
            except:
                raise ColumnIdentifierError('Column identifier "%s" is neither a index, nor a existing column\'s name.' % c)

            # Fail out if index is 0-based
            if c < 0:
                raise ColumnIdentifierError('Columns 0 is not valid; columns are 1-based.')

            # Fail out if index is out of range
            if c >= len(column_names):
                raise ColumnIdentifierError('Index %i is beyond the last named column, "%s" at index %i.' % (c, column_names[-1], len(column_names) - 1))

            columns.append(c)

    return columns

def main(args):
    """
    Command line-utility that filters and truncates CSV files. Like unix "cut" command, but for tabular data.
    """
    tab = table.Table.from_csv(args.file, **extract_csv_reader_kwargs(args)) 

    if args.show_headers:
        print tab
        sys.exit()

    column_ids = parse_column_identifiers(args.columns, tab.headers())

    subtab = table.Table()

    for i in column_ids:
        subtab.append(tab[i])

    if args.linenumbers:
        subtab.insert(0, table.Column(0, 'line_number', range(subtab.count_rows()), normal_type=int))

    o = StringIO()
    output = subtab.to_csv(o, skipheader=args.skipheader)
    output = o.getvalue()
    o.close()

    print output
                
if __name__ == "__main__":
    """
    Process command line arguments.
    """
    parser = init_common_parser(description='Filter and truncate CSV files. Like unix "cut" command, but for tabular data.')
    parser.add_argument('-n', '--names', dest='show_headers', action='store_true',
                        help='Display column names and indices from the input CSV and exit.')
    parser.add_argument('-c', '--columns', dest='columns',
                        help='A comma separated list of column indices or names to be extracted. Defaults to all columns.')
    parser.add_argument('-s', '--skipheader', dest='skipheader', action='store_true',
                        help='Do not display the csv header in the output. Useful when piping to grep or uniq.')
    parser.add_argument('-l', '--linenumbers', dest='linenumbers', action='store_true',
                        help='Insert a column of line numbers at the front of the output. Useful when piping to grep or as a simple primary key.')

    main(parser.parse_args())
