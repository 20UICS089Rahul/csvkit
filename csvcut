#!/usr/bin/env python

"""
csvcut is originally the work of eminent hackers Joe Germuska and Aaron Bycoffe.

This code is forked from:
https://gist.github.com/561347/9846ebf8d0a69b06681da9255ffe3d3f59ec2c97
"""

"""
Usage: 
    csvcut foobar.csv
    (prints the first column of each row of foobar.csv)
    
    head -10 foobar.csv | csvcut -f 0,2
    (prints the first and third columns of the first ten lines of foobar.csv)

    csvcut -f 0,2 -d "|" foobar.csv
    (prints the first and third columns of the pipe-delimited foobar.csv)

    csvcut -f 0,2 -t foobar.csv
    (prints the first and third columns of the tab-delimited foobar.csv
     if present, the -d option will be ignored.)

    csvcut -h foobar.csv
    (prints the values of the first line of foobar.csv, preceded by the field index which would 
     be used to display that column.  If present, the -f option will be ignored.)

    csvcut -f 0,1,2 -d "|" -o , foobar.csv
    (prints the first three columns of the pipe-delimited foobar.csv; output
    will be comma-delimited.)

    csvcut -f 0,1,2 -o "|" foobar.csv
    (prints the first three columns of the comma-delimited foobar.csv; output
    will be pipe-delimited.)

    csvcut -f : -o "|" foobar.csv
    (prints all the columns of the comma-delimited foobar.csv; output will be
    pipe-delimited.)

    csvcut -f 0,1 -d "," -q "|" foobar.csv
    (prints the first two columns of the comma-delimited, pipe-quoted foorbar.csv.)
"""

import csv 
import sys

import argparse

class ColumnIdentifierError(Exception):
    """
    Exception raised when the user supplies an invalid column identifier.
    """
    def __init__(self, msg):
        self.msg = msg

def parse_column_identifiers(ids, column_names):
    """
    Parse a comma-separated list of column indicies and names into a list of integer indices.
    """
    # Check for wildcard
    if ids == ':':
        return range(len(column_names))

    columns = []

    for c in ids.split(","):
        if c in column_names:
            columns.append(column_names.index(c))
        else:
            try:
                c = int(c)
            # Fail out if neither a column name nor an integer
            except:
                raise ColumnIdentifierError('Column identifier "%s" is neither a index, nor a existing column\'s name.' % c)

            # Fail out if index is out of range
            if c >= len(column_names):
                raise ColumnIdentifierError('Index %i is beyond the last named column, "%s" at index %i.' % (c, column_names[-1], len(column_names) - 1))

            columns.append(c)

    return columns

def main():
    """
    Command line-utility that filters and truncates CSV files. Like unix "cut" command, but for tabular data.

    Note: fields are zero-based, as opposed to 'cut' where they are 1-based.
    Note: columns without a header are ignored (non-rectangular data).
    """
    parser = argparse.ArgumentParser(description='Filter and trucate CSV files. Like unix "cut" command, but for tabular data.')
    parser.add_argument('file', metavar="FILE", nargs='?', type=argparse.FileType('r'), default=sys.stdin,
                        help='The CSV file to operate on. If omitted, will accept input on STDIN.')
    parser.add_argument('-n', '--names', dest='show_headers', action='store_true',
                        help='Display column names and indices from the input CSV and exit.')
    parser.add_argument('-c', '--columns', dest='columns', default='0',
                        help='A comma separated list of column indices or names to be extracted. Defaults to first column only. Use ":" for all columns.')
    parser.add_argument('-d', '--delimiter', dest='delimiter', default=',',
                        help='Delimiting character of the input CSV file.')
    parser.add_argument('-t', '--tabs', dest='tabs', action='store_true',
                        help='Specifies that the input CSV file is delimited with tabs. Overrides "-d".')
    parser.add_argument('-o', '--outdelimiter', dest='output_delimiter', default=',',
                        help='Delimiting character of the output CSV file.')
    parser.add_argument('-q', '--quotechar', dest='quotechar', default='"',
                        help='Character used to quote strings in the input CSV file.')

    args = parser.parse_args()

    # Create an output csv writer in advance, in order to save overhead
    writer = csv.writer(sys.stdout, delimiter=args.output_delimiter)

    for i, row in enumerate(csv.reader(args.file, delimiter=args.delimiter, quotechar=args.quotechar)):
        if i == 0:
            # Show headers and exit
            if args.show_headers:
                for i, c in enumerate(row):
                    print "%3i: %s" % (i, c)

                sys.exit()
            # Fetch column names for by-name indexing 
            else:
                column_names = row

                try:
                    columns = parse_column_identifiers(args.columns, column_names)
                except ColumnIdentifierError, e:
                    sys.exit(e.msg)

        writer.writerow([row[c] for c in columns])

if __name__ == "__main__":
    main()
