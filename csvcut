#!/usr/bin/env python

"""
csvcut is originally the work of eminent hackers Joe Germuska and Aaron Bycoffe.

This code is forked from:
https://gist.github.com/561347/9846ebf8d0a69b06681da9255ffe3d3f59ec2c97
"""

"""
Like cut, but for CSVs. To be used from a shell command line.

Note that fields are zero-based, as opposed to 'cut' where they are 1-based.

Should use something better than getopt, but this works...

Usage: 
    csvcut foobar.csv
    (prints the first column of each row of foobar.csv)
    
    head -10 foobar.csv | csvcut -f 0,2
    (prints the first and third columns of the first ten lines of foobar.csv)

    csvcut -f 0,2 -d "|" foobar.csv
    (prints the first and third columns of the pipe-delimited foobar.csv)

    csvcut -f 0,2 -t foobar.csv
    (prints the first and third columns of the tab-delimited foobar.csv
     if present, the -d option will be ignored.)

    csvcut -h foobar.csv
    (prints the values of the first line of foobar.csv, preceded by the field index which would 
     be used to display that column.  If present, the -f option will be ignored.)

    csvcut -f 0,1,2 -d "|" -o , foobar.csv
    (prints the first three columns of the pipe-delimited foobar.csv; output
    will be comma-delimited.)

    csvcut -f 0,1,2 -o "|" foobar.csv
    (prints the first three columns of the comma-delimited foobar.csv; output
    will be pipe-delimited.)

    csvcut -f : -o "|" foobar.csv
    (prints all the columns of the comma-delimited foobar.csv; output will be
    pipe-delimited.)

    csvcut -f 0,1 -d "," -q "|" foobar.csv
    (prints the first two columns of the comma-delimited, pipe-quoted foorbar.csv.)
"""

import csv 
import sys

import argparse

def main():
    """
    Command line-utility that splices and truncates CSV files in a variety of ways.
    """
    parser = argparse.ArgumentParser(description='Convert common, but less awesome, tabular data formats to CSV.')
    parser.add_argument('file', metavar="FILE", nargs='?', type=argparse.FileType('r'), default=sys.stdin,
                        help='The CSV file to operate on. If omitted, will accept input on STDIN.')
    parser.add_argument('-n', '--names', dest='show_headers', action='store_true',
                        help='Display column names and indices from the input CSV and exit.')
    parser.add_argument('-f', dest='columns', default='0',
                        help='A comma separated list of column indexes to be extracted. Defaults to first column only. Use ":" for all columns.')
    parser.add_argument('-d', '--delimiter', dest='delimiter', default=',',
                        help='Delimiting character of the input CSV file.')
    parser.add_argument('-t', '--tabs', dest='tabs', action='store_true',
                        help='Specifies that the input CSV file is delimited with tabs. Overrides "-d".')
    parser.add_argument('-o', '--outdelimiter', dest='output_delimiter', default=',',
                        help='Delimiting character of the output CSV file.')
    parser.add_argument('-q', '--quotechar', dest='quotechar', default='"',
                        help='Character used to quote strings in the input CSV file.')

    args = parser.parse_args()

    columns_split = [int(i) for i in args.columns.split(",")]

    for row in csv.reader(args.file, delimiter=args.delimiter, quotechar=args.quotechar):
        # Show headers and exit
        if args.show_headers:
            for i, c in enumerate(row):
                print "%3i: %s" % (i, c)

            return 

        writer = csv.writer(sys.stdout, delimiter=args.output_delimiter)

        if args.columns == [':']:
            columns = range(len(row))
        else:
            columns = columns_split 

        writer.writerow([row[int(c)] for c in columns])

if __name__ == "__main__":
    main()
