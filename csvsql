#!/usr/bin/env python

import csv
import sys

import argparse

from csvkit import sql
from csvkit import typeinference

def main():
    parser = argparse.ArgumentParser(description='Generate a SQL CREATE TABLE statement for a CSV file.')
    parser.add_argument('file', metavar="FILE", nargs='?', type=argparse.FileType('r'), default=sys.stdin,
                        help='The CSV file to operate on. If omitted, will accept input on STDIN.')
    parser.add_argument('-d', '--delimiter', dest='delimiter', default=',',
                        help='Delimiting character of the input CSV file. Defaults to comma.')
    parser.add_argument('-t', '--tabs', dest='tabs', action='store_true',
                        help='Specifies that the input CSV file is delimited with tabs. Overrides "-d".')
    parser.add_argument('-q', '--quotechar', dest='quotechar', default='"',
                        help='Character used to quote strings in the input CSV file. Defaults to double-quote.')
    parser.add_argument('-i', '--dialect', dest='dialect', choices=sql.DIALECTS,
                        help='Dialect of SQL to generate.')

    args = parser.parse_args()
    
    if args.tabs:
        args.delimiter = '\t'

    reader = csv.reader(args.file, delimiter=args.delimiter, quotechar=args.quotechar)

    column_names = reader.next()

    data_columns = [[] for h in column_names]

    for row in reader:
        try:
            for i, d in enumerate(row):
                data_columns[i].append(d)
        except KeyError, e:
            # TKTK - non-rectangular data
            raise

    normal_types = []
    normal_columns= []

    for column in data_columns:
        t, c = typeinference.normalize_column_type(column)
        normal_types.append(t)
        normal_columns.append(c)

    print sql.make_create_table(column_names, normal_types, normal_columns, dialect=args.dialect)

if __name__ == '__main__':
    main()
