#!/usr/bin/env python

import argparse
import sys

from csvkit import convert
from csvkit.cli import CSVKitUtility

class In2CSV(CSVKitUtility):
    description = 'Convert common, but less awesome, tabular data formats to CSV.'
    epilog='Some command line flags only pertain to specific input formats.'

    def add_arguments(self):
        self.argparser.add_argument('-f', '--format', dest='format',
                            help='The format of the input file. If not specified will be inferred from the file type. Supported formats: %s.' % ', '.join(sorted(convert.SUPPORTED_FORMATS)))
        self.argparser.add_argument('-s', '--schema', dest='schema', type=argparse.FileType('r'),
                            help='Specifies a CSV-formatted schema file for converting fixed-width files.  See documentation for details.')

    def main(self):
        if self.args.file.name == '<stdin>' and not self.args.format:
            sys.exit('You must specify a format when inputting data via STDIN (pipe).')

        if self.args.format:
            format = self.args.format

            if format not in convert.SUPPORTED_FORMATS:
                sys.exit('"%s" is not a supported format' % self.args.format)

        elif self.args.schema:
            format = 'fixed'
        else:
            format = convert.guess_format(self.args.file.name)

            if not format:
                sys.exit('Unable to automatically determine the format of the input file. Try specifying a format with --format.')

        kwargs = self.reader_kwargs

        if self.args.schema:
            kwargs['schema'] = self.args.schema

        # Fixed width can be processed as a stream
        if format == 'fixed':
            kwargs['output'] = sys.stdout

        sys.stdout.write(convert.convert(self.args.file, format, **kwargs))

if __name__ == "__main__":
    utility = In2CSV()
    utility.main()
